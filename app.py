import streamlit as st
import openai
import os
import pandas as pd
from datetime import datetime
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib.pagesizes import A4
import tempfile

# Passwortschutz
def check_password():
    def password_entered():
        if st.session_state["password"] == "LA2024":
            st.session_state["password_correct"] = True
            del st.session_state["password"]
        else:
            st.session_state["password_correct"] = False

    if "password_correct" not in st.session_state:
        st.text_input("Passwort", type="password", on_change=password_entered, key="password")
        st.stop()
    elif not st.session_state["password_correct"]:
        st.text_input("Passwort", type="password", on_change=password_entered, key="password")
        st.error("‚ùå Falsches Passwort")
        st.stop()

check_password()

st.set_page_config(page_title="Sanierungsfahrplan PRO", layout="centered", page_icon="üè°")
st.title("üè° Sanierungsfahrplan PRO")

adresse = st.text_input("Adresse des Geb√§udes", "Musterstra√üe 12, Beispielstadt")
baujahr = st.number_input("Baujahr", 1900, datetime.now().year, 1970)
heizung = st.selectbox("Heizsystem", ["Gas", "√ñl", "W√§rmepumpe", "Strom", "Fernw√§rme", "Pellet", "Sonstiges"])
wohnflaeche = st.number_input("Wohnfl√§che (m¬≤)", 50, 1000, 120)
dach = st.checkbox("Dach ged√§mmt")
keller = st.checkbox("Kellerdecke ged√§mmt")
pv = st.checkbox("Photovoltaik vorhanden")

def check_foerderung(m):
    mapping = {
        "Dachd√§mmung": ("BEG EM", 20),
        "Heizung tauschen": ("KfW 261", 30),
        "Fenster erneuern": ("BEG EM", 15),
        "Photovoltaik": ("KfW 270", 10)
    }
    return mapping.get(m, ("Nicht f√∂rderf√§hig", 0))

@st.cache_data(show_spinner=False)
def gpt_analyse(daten):
    res = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": "Du bist ein Energieberater."},
            {"role": "user", "content": f"""Analysiere folgendes Geb√§ude:
Adresse: {daten['adresse']}
Baujahr: {daten['baujahr']}
Heizung: {daten['heizung']}
Dachd√§mmung: {"ja" if daten['dach'] else "nein"}
Kellerdeckend√§mmung: {"ja" if daten['keller'] else "nein"}
PV-Anlage: {"ja" if daten['pv'] else "nein"}
Wohnfl√§che: {daten['wohnflaeche']} m¬≤

Empfohlene Ma√ünahmen, CO‚ÇÇ-Einsparung, F√∂rderungen, Zeitplan bitte als Liste.
"""}
        ],
        temperature=0.3
    )
    return res.choices[0].message.content

def export_pdf(text, adresse):
    path = tempfile.NamedTemporaryFile(delete=False, suffix=".pdf").name
    doc = SimpleDocTemplate(path, pagesize=A4)
    styles = getSampleStyleSheet()
    story = [Paragraph(f"Sanierungsfahrplan f√ºr: {adresse}", styles['Title']),
             Spacer(1, 12),
             Paragraph("Erstellt am: " + datetime.today().strftime("%d.%m.%Y"), styles['Normal']),
             Spacer(1, 12)]
    for block in text.split("\n\n"):
        story.append(Paragraph(block.replace("\n", "<br/>"), styles['Normal']))
        story.append(Spacer(1, 12))
    doc.build(story)
    return path

if st.button("üöÄ Fahrplan erstellen"):
    eingaben = {
        "adresse": adresse,
        "baujahr": baujahr,
        "heizung": heizung,
        "dach": dach,
        "keller": keller,
        "pv": pv,
        "wohnflaeche": wohnflaeche
    }
    with st.spinner("Analyse wird durchgef√ºhrt..."):
        ergebnis = gpt_analyse(eingaben)
    st.success("‚úÖ Analyse abgeschlossen!")
    st.markdown("### üìÑ Sanierungsfahrplan")
    st.markdown(ergebnis)
    pdf_path = export_pdf(ergebnis, adresse)
    with open(pdf_path, "rb") as f:
        st.download_button("üì• PDF herunterladen", f, file_name="Sanierungsfahrplan.pdf")

import matplotlib.pyplot as plt

def berechne_kosten_und_co2():
    return [
        {"Jahr": "2024", "Ma√ünahme": "Dachd√§mmung", "Kosten": 12000, "CO2_Einsparung": 1.2},
        {"Jahr": "2025", "Ma√ünahme": "Heizung tauschen", "Kosten": 18000, "CO2_Einsparung": 2.1},
        {"Jahr": "2026", "Ma√ünahme": "Fenster erneuern", "Kosten": 8000, "CO2_Einsparung": 0.8},
        {"Jahr": "2027", "Ma√ünahme": "PV-Anlage installieren", "Kosten": 10000, "CO2_Einsparung": 1.6}
    ]

if st.button("üìä Ma√ünahmen & Diagramm anzeigen"):
    daten = berechne_kosten_und_co2()
    df = pd.DataFrame(daten)
    st.session_state["analyse_df"] = df
    st.markdown("### üí∏ Ma√ünahmen√ºbersicht")
    st.dataframe(df)

    st.markdown("### üìà CO‚ÇÇ-Einsparung nach Jahr")
    fig, ax = plt.subplots()
    ax.bar(df["Jahr"], df["CO2_Einsparung"], color='green')
    ax.set_ylabel("Einsparung (t/Jahr)")
    st.pyplot(fig)

    st.markdown("### üí∞ Investitionen")
    fig2, ax2 = plt.subplots()
    ax2.bar(df["Jahr"], df["Kosten"], color='orange')
    ax2.set_ylabel("Kosten (‚Ç¨)")
    st.pyplot(fig2)

if "kosten" not in st.session_state:
    st.session_state["kosten"] = {
        "Dachd√§mmung": st.slider("Kosten Dachd√§mmung (‚Ç¨)", 5000, 20000, 12000),
        "Heizung tauschen": st.slider("Kosten Heizung (‚Ç¨)", 8000, 25000, 18000),
        "Fenster erneuern": st.slider("Kosten Fenster (‚Ç¨)", 4000, 15000, 8000),
        "PV-Anlage installieren": st.slider("Kosten PV (‚Ç¨)", 5000, 20000, 10000)
    }

if "co2" not in st.session_state:
    st.session_state["co2"] = {
        "Dachd√§mmung": st.slider("CO‚ÇÇ-Einsparung Dach (t)", 0.5, 3.0, 1.2),
        "Heizung tauschen": st.slider("CO‚ÇÇ-Einsparung Heizung (t)", 1.0, 4.0, 2.1),
        "Fenster erneuern": st.slider("CO‚ÇÇ-Einsparung Fenster (t)", 0.3, 2.0, 0.8),
        "PV-Anlage installieren": st.slider("CO‚ÇÇ-Einsparung PV (t)", 1.0, 3.0, 1.6)
    }

def generate_interactive_data():
    jahre = ["2024", "2025", "2026", "2027"]
    massnahmen = ["Dachd√§mmung", "Heizung tauschen", "Fenster erneuern", "PV-Anlage installieren"]
    return [
        {"Jahr": jahr, "Ma√ünahme": m, "Kosten": st.session_state["kosten"][m], "CO2_Einsparung": st.session_state["co2"][m]}
        for jahr, m in zip(jahre, massnahmen)
    ]

if st.button("üìä Interaktive Analyse anzeigen"):
    daten = generate_interactive_data()
    df = pd.DataFrame(daten)
    st.session_state["analyse_df"] = df
    st.dataframe(df)

    st.markdown("### üìâ CO‚ÇÇ-Einsparung")
    fig, ax = plt.subplots()
    ax.bar(df["Jahr"], df["CO2_Einsparung"], color='green')
    ax.set_ylabel("CO‚ÇÇ-Einsparung (t)")
    st.pyplot(fig)

    st.markdown("### üí∞ Investitionen")
    fig2, ax2 = plt.subplots()
    ax2.bar(df["Jahr"], df["Kosten"], color='orange')
    ax2.set_ylabel("Kosten (‚Ç¨)")
    st.pyplot(fig2)

    st.success("Daten aktualisiert. Beim PDF-Export werden Diagramme eingebettet.")

def export_pdf_with_charts(text, adresse, df):
    path = tempfile.NamedTemporaryFile(delete=False, suffix=".pdf").name
    doc = SimpleDocTemplate(path, pagesize=A4)
    styles = getSampleStyleSheet()
    story = [Paragraph(f"Sanierungsfahrplan f√ºr: {adresse}", styles['Title']),
             Spacer(1, 12),
             Paragraph("Erstellt am: " + datetime.today().strftime("%d.%m.%Y"), styles['Normal']),
             Spacer(1, 12)]
    for block in text.split("\n\n"):
        story.append(Paragraph(block.replace("\n", "<br/>"), styles['Normal']))
        story.append(Spacer(1, 12))

    # Diagramm: CO‚ÇÇ-Einsparung
    d = Drawing(400, 200)
    chart = VerticalBarChart()
    chart.data = [df["CO2_Einsparung"].tolist()]
    chart.categoryAxis.categoryNames = df["Jahr"].tolist()
    chart.valueAxis.valueMin = 0
    chart.valueAxis.valueMax = max(df["CO2_Einsparung"]) + 1
    chart.barWidth = 10
    chart.width = 350
    chart.height = 150
    chart.x = 25
    chart.y = 25
    d.add(chart)
    story.append(d)
    story.append(Spacer(1, 24))

    doc.build(story)
    return path

# √úberschreibe PDF-Funktion
if "export_pdf" in globals():
    export_pdf = export_pdf_with_charts
